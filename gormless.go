// Code generated by tools/gen/main.go; DO NOT EDIT.

package gormless

//go:generate go run ./tools/gen/main.go

import (
	"context"
	"database/sql"
	"github.com/google/go-safeweb/safesql"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"log"
)

type DB struct {
	unsafe *gorm.DB
}

func New(unsafe *gorm.DB) *DB {
	return &DB{unsafe}
}

func (db *DB) Unsafe() *gorm.DB {
	log.Print("UNSAFE: Calling the Unsafe() method is unsafe and should be avoided.")
	return db.unsafe
}

func (db *DB) Config() *gorm.Config {
	return db.unsafe.Config
}

func (db *DB) Error() error {
	return db.unsafe.Error
}

func (db *DB) RowsAffected() int64 {
	return db.unsafe.RowsAffected
}

func (db *DB) Statement() *gorm.Statement {
	return db.unsafe.Statement
}

func (db *DB) Assign(p1 ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Assign(p1...)}
}

func (db *DB) Association(p1 string) *gorm.Association {
	return db.unsafe.Association(p1)
}

func (db *DB) Attrs(p1 ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Attrs(p1...)}
}

func (db *DB) Begin(p1 ...*sql.TxOptions) *gorm.DB {
	return db.unsafe.Begin(p1...)
}

func (db *DB) BindVarTo(p1 clause.Writer, p2 *gorm.Statement, p3 interface{}) {
	db.unsafe.BindVarTo(p1, p2, p3)
}

func (db *DB) Clauses(p1 ...clause.Expression) *gorm.DB {
	return db.unsafe.Clauses(p1...)
}

func (db *DB) Commit() *gorm.DB {
	return db.unsafe.Commit()
}

func (db *DB) Count(p1 *int64) *gorm.DB {
	return db.unsafe.Count(p1)
}

func (db *DB) Create(s *safesql.TrustedSQLString) *DB {
	return &DB{unsafe: db.unsafe.Create(s.String())}
}

func (db *DB) CreateInBatches(p1 interface{}, p2 int) *gorm.DB {
	return db.unsafe.CreateInBatches(p1, p2)
}

func (db *DB) Debug() *gorm.DB {
	return db.unsafe.Debug()
}

func (db *DB) DefaultValueOf(p1 *schema.Field) clause.Expression {
	return db.unsafe.DefaultValueOf(p1)
}

func (db *DB) Delete(p1 interface{}, s *safesql.TrustedSQLString, args ...interface{}) *DB {
	passthru := []interface{}{s.String()}
	passthru = append(passthru, args...)
	return &DB{unsafe: db.unsafe.Delete(p1, passthru...)}
}

func (db *DB) Distinct(args ...*safesql.TrustedSQLString) *DB {
	passthru := make([]interface{}, len(args))
	for i, arg := range args {
		passthru[i] = arg.String()
	}
	return &DB{unsafe: db.unsafe.Distinct(passthru...)}
}

func (db *DB) Exec(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Exec(s.String(), args...)}
}

func (db *DB) Find(p1 interface{}, s *safesql.TrustedSQLString, args ...interface{}) *DB {
	passthru := []interface{}{s.String()}
	passthru = append(passthru, args...)
	return &DB{unsafe: db.unsafe.Find(p1, passthru...)}
}

func (db *DB) FindInBatches(p1 interface{}, p2 int, p3 func(*gorm.DB, int) error) *gorm.DB {
	return db.unsafe.FindInBatches(p1, p2, p3)
}

func (db *DB) First(p1 interface{}, s *safesql.TrustedSQLString, args ...interface{}) *DB {
	passthru := []interface{}{s.String()}
	passthru = append(passthru, args...)
	return &DB{unsafe: db.unsafe.First(p1, passthru...)}
}

func (db *DB) FirstOrCreate(p1 interface{}, p2 ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.FirstOrCreate(p1, p2...)}
}

func (db *DB) FirstOrInit(p1 interface{}, p2 ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.FirstOrInit(p1, p2...)}
}

func (db *DB) Group(s *safesql.TrustedSQLString) *DB {
	return &DB{unsafe: db.unsafe.Group(s.String())}
}

func (db *DB) Having(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Having(s.String(), args...)}
}

func (db *DB) InnerJoins(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.InnerJoins(s.String(), args...)}
}

func (db *DB) InstanceSet(s *safesql.TrustedSQLString, arg interface{}) *DB {
	return &DB{unsafe: db.unsafe.InstanceSet(s.String(), arg)}
}

func (db *DB) Joins(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Joins(s.String(), args...)}
}

func (db *DB) Last(p1 interface{}, s *safesql.TrustedSQLString, args ...interface{}) *DB {
	passthru := []interface{}{s.String()}
	passthru = append(passthru, args...)
	return &DB{unsafe: db.unsafe.Last(p1, passthru...)}
}

func (db *DB) Limit(p1 int) *gorm.DB {
	return db.unsafe.Limit(p1)
}

func (db *DB) MapColumns(p1 map[string]string) *gorm.DB {
	return db.unsafe.MapColumns(p1)
}

func (db *DB) Migrator() gorm.Migrator {
	return db.unsafe.Migrator()
}

func (db *DB) Model(s *safesql.TrustedSQLString) *DB {
	return &DB{unsafe: db.unsafe.Model(s.String())}
}

func (db *DB) Not(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Not(s.String(), args...)}
}

func (db *DB) Offset(p1 int) *gorm.DB {
	return db.unsafe.Offset(p1)
}

func (db *DB) Omit(p1 ...string) *gorm.DB {
	return db.unsafe.Omit(p1...)
}

func (db *DB) Or(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Or(s.String(), args...)}
}

func (db *DB) Order(s *safesql.TrustedSQLString) *DB {
	return &DB{unsafe: db.unsafe.Order(s.String())}
}

func (db *DB) Pluck(s *safesql.TrustedSQLString, arg interface{}) *DB {
	return &DB{unsafe: db.unsafe.Pluck(s.String(), arg)}
}

func (db *DB) Preload(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Preload(s.String(), args...)}
}

func (db *DB) QuoteTo(p1 clause.Writer, p2 string) {
	db.unsafe.QuoteTo(p1, p2)
}

func (db *DB) Raw(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Raw(s.String(), args...)}
}

func (db *DB) Rollback() *gorm.DB {
	return db.unsafe.Rollback()
}

func (db *DB) RollbackTo(s *safesql.TrustedSQLString) *DB {
	return &DB{unsafe: db.unsafe.RollbackTo(s.String())}
}

func (db *DB) Row() *sql.Row {
	return db.unsafe.Row()
}

func (db *DB) Save(p1 interface{}) *gorm.DB {
	return db.unsafe.Save(p1)
}

func (db *DB) SavePoint(s *safesql.TrustedSQLString) *DB {
	return &DB{unsafe: db.unsafe.SavePoint(s.String())}
}

func (db *DB) Scan(p1 interface{}) *gorm.DB {
	return db.unsafe.Scan(p1)
}

func (db *DB) Scopes(p1 ...func(*gorm.DB) *gorm.DB) *gorm.DB {
	return db.unsafe.Scopes(p1...)
}

func (db *DB) Select(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Select(s.String(), args...)}
}

func (db *DB) Session(p1 *gorm.Session) *gorm.DB {
	return db.unsafe.Session(p1)
}

func (db *DB) Set(s *safesql.TrustedSQLString, arg interface{}) *DB {
	return &DB{unsafe: db.unsafe.Set(s.String(), arg)}
}

func (db *DB) Table(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Table(s.String(), args...)}
}

func (db *DB) Take(p1 interface{}, s *safesql.TrustedSQLString, args ...interface{}) *DB {
	passthru := []interface{}{s.String()}
	passthru = append(passthru, args...)
	return &DB{unsafe: db.unsafe.Take(p1, passthru...)}
}

func (db *DB) Unscoped() *gorm.DB {
	return db.unsafe.Unscoped()
}

func (db *DB) Update(s *safesql.TrustedSQLString, arg interface{}) *DB {
	return &DB{unsafe: db.unsafe.Update(s.String(), arg)}
}

func (db *DB) UpdateColumn(s *safesql.TrustedSQLString, arg interface{}) *DB {
	return &DB{unsafe: db.unsafe.UpdateColumn(s.String(), arg)}
}

func (db *DB) UpdateColumns(p1 interface{}) *gorm.DB {
	return db.unsafe.UpdateColumns(p1)
}

func (db *DB) Updates(p1 interface{}) *gorm.DB {
	return db.unsafe.Updates(p1)
}

func (db *DB) Where(s *safesql.TrustedSQLString, args ...interface{}) *DB {
	return &DB{unsafe: db.unsafe.Where(s.String(), args...)}
}

func (db *DB) WithContext(p1 context.Context) *gorm.DB {
	return db.unsafe.WithContext(p1)
}
